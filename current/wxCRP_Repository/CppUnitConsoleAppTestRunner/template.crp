WIZARD
{
    // In this block you define the sequence of how your wizard works
    // it can hold conditional IF statements. With SUMMARIZE you can
    // quickly log the value which will be shown in the final wizard sheet
    // to inform the user about it's entered data.

    SUMMARIZE "The following is going to be generated:\n\n";

    ASK FILE;
    SUMMARIZE "  » File name (without extension):    $1\n" FILE;

    ASK MODE;
    SUMMARIZE "  » Test mode:       $1\n" MODE;

    IF(MODE[3])
    {
        ASK AUT;
        SUMMARIZE "  » AUT class name:       $1\n" AUT;
    }
             //-------------------
}

TEMPLATE
{
    // The template section is executed after the wizard, and in this section
    // the files will be written to disk, or the tabbed sheets.

    STRVAR CPPNAME;

    CPPNAME = FILE + ".cpp";


                NEWMODULE CPPNAME;
                @#$///////////////////////////////////////////////////////////////////////////////
                @#$// Name:        @CPPNAME@
                @#$// Author:      Reinhold Füreder
                @#$// Modified by:
                @#$// Created:     2006-02-14
                @#$// RCS-ID:      $Id: template.crp,v 1.1 2006/02/14 01:12:58 reinhold Exp $
                @#$// Copyright:   (c) Reinhold Füreder
                @#$// Licence:     wxWindows licence
                @#$///////////////////////////////////////////////////////////////////////////////
                @#$
                @#$#include <cppunit/CompilerOutputter.h>
                @#$#include <cppunit/extensions/TestFactoryRegistry.h>
                @#$#include <cppunit/ui/text/TestRunner.h>
                @#$

IF(!MODE[1])
{
                @#$// For checking wxGuiTestCallTrace, see below:
                @#$//#include "wx/log.h"
                @#$
                @#$#include "swWxGuiTestHelper.h"
                @#$#include "swWxGuiTestCppUnitWarningAsserter.h"
                @#$#include "swInitWxGuiTest.h"
                @#$
}
IF(MODE[3])
{
                @#$#include "@AUT@.h"
                @#$
}
                @#$int main (int argc, char* argv[])
                @#${

IF(MODE[1])
{
                @#$    // Get the top level suite from the registry
                @#$    CPPUNIT_NS::Test *suite = CPPUNIT_NS::TestFactoryRegistry::getRegistry().makeTest();
}
ELSE IF(!MODE[1])
{
                @#$    //wxLog::AddTraceMask ("wxGuiTestCallTrace");
                @#$
                @#$    // Configure unit testing:
                @#$    swTst::WxGuiTestHelper::SetShowModalDialogsNonModalFlag (true);
                @#$    swTst::WxGuiTestHelper::SetShowPopupMenusFlag (false);
                @#$    // Disable interactivity for really running automatic tests:
                @#$    //swTst::WxGuiTestHelper::SetDisableTestInteractivity (true);
                @#$    // Likewise, prevent pop-up warning message box on failing assertions:
                @#$    //swTst::WxGuiTestHelper::SetPopupWarningForFailingAssert (false);
                @#$    // But do check provoked warnings in testing mode:
                @#$    swTst::WxGuiTestHelper::SetCheckForProvokedWarnings (true);
                @#$    // Which requires the correct CppUnit warning asserter:
                @#$    swTst::WxGuiTestHelper::SetWarningAsserter (
                @#$            new swTst::WxGuiTestCppUnitWarningAsserter ());
                @#$
}
IF(MODE[3])
{
                @#$    // Create AUT:
                @#$    @AUT@ *applicationUnderTest = new @AUT@ ();
                @#$
}
IF(!MODE[1])
{
                @#$    // swTst::swInitWxGuiTest, which "packs" all registered wxWidgets GUI tests
                @#$    // into decorated shape, must not use CPPUNIT_TEST_SUITE_REGISTRATION macro
                @#$    // when WxGuiTesting is built as an independent and reusable library.
                @#$    // Thus, in order to use the remaining standard infrastructure, we create a
                @#$    // new test suite named equal to the usual top level registry or suite name
                @#$    // "All Tests". Then all registered wxGui tests are added to it by means of
                @#$    // directly using swInitWxGuiTest class:
                @#$    CPPUNIT_NS::TestSuite *suite = new CPPUNIT_NS::TestSuite ("All Tests");
                @#$    suite->addTest (swTst::InitWxGuiTest::suite ());
}

                @#$
                @#$    // Adds the test to the list of test to run
                @#$    CPPUNIT_NS::TextUi::TestRunner runner;
                @#$    runner.addTest (suite);
                @#$
                @#$    // Change the default outputter to a compiler error format outputter
                @#$    runner.setOutputter (new CPPUNIT_NS::CompilerOutputter (&runner.result (),
                @#$            std::cerr));
                @#$
                @#$    // Run the test - don't close window in debug mode at the end
                @#$    bool wasSucessful = runner.run ();
                @#$
                @#$    // Return error code 1 if the one of test failed.
                @#$    return wasSucessful ? 0 : 1;
                @#$}

}
